{"name": "msg_list0006-列出留言_3005", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Unterminated string starting at: line 1 column 93 (char 92)", "trace": "self = <test_case.test_list.TestAdd object at 0x000001FBF49FB248>\nid = 'msg_list0006', name = '列出留言_3005', url = '/api/messages/', method = 'GET'\nbody = '{\"page\":\"yj\",\"value\":\"4\"}'\nres = '{\"timestamp\":\"2021-07-16T10:59:31.702+0000\",\"status\":\"400\",\"error\": \"Bad Request\",\"message\":\"Failed to convert value of type \\\\\"java.lang.String\\\\\" to required type \\\\\"java.lang.Integer\\\\\";nested excepti'\nget_token = None\n\n    @allure.severity(\"blocker\")\n    @allure.story(\"回复留言用例\")\n    @allure.title(\"{id}-{name}\")\n    @pytest.mark.parametrize(\"id,name,url,method,body,res\",testdata)\n    def test_login(self,id,name,url,method,body,res,get_token):\n        BaseApi.logger.info(\"执行用例{}{}\".format(id,name))\n        relist = List()\n        newbody = json.loads(body)\n        newurl = ini.get(\"url\", \"host\") + url + newbody[\"page\"] + \"/\" + newbody[\"value\"]\n        relist.send(url=newurl,method=method)\n    \n        try:\n>           expect =  json.loads(res)\n\ntest_list.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python\\Python37\\lib\\json\\__init__.py:348: in loads\n    return _default_decoder.decode(s)\nD:\\Python\\Python37\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001FBF2E7D3C8>\ns = '{\"timestamp\":\"2021-07-16T10:59:31.702+0000\",\"status\":\"400\",\"error\": \"Bad Request\",\"message\":\"Failed to convert value of type \\\\\"java.lang.String\\\\\" to required type \\\\\"java.lang.Integer\\\\\";nested excepti'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Unterminated string starting at: line 1 column 93 (char 92)\n\nD:\\Python\\Python37\\lib\\json\\decoder.py:353: JSONDecodeError"}, "parameters": [{"name": "id", "value": "'msg_list0006'"}, {"name": "name", "value": "'列出留言_3005'"}, {"name": "url", "value": "'/api/messages/'"}, {"name": "method", "value": "'GET'"}, {"name": "body", "value": "'{\"page\":\"yj\",\"value\":\"4\"}'"}, {"name": "res", "value": "'{\"timestamp\":\"2021-07-16T10:59:31.702+0000\",\"status\":\"400\",\"error\": \"Bad Request\",\"message\":\"Failed to convert value of type \\\"java.lang.String\\\" to required type \\\"java.lang.Integer\\\";nested excepti'"}], "start": 1626766239456, "stop": 1626766239686, "uuid": "4884e18d-696a-493c-b02f-a0751d68ba4b", "historyId": "b80dbe5e6fd5a8b4b6db46ec33cb3ea4", "testCaseId": "37a3f9f68450ed4704d863dd5226aaee", "fullName": "test_case.test_list.TestAdd#test_login", "labels": [{"name": "story", "value": "回复留言用例"}, {"name": "feature", "value": "留言板块用例"}, {"name": "severity", "value": "blocker"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_list"}, {"name": "subSuite", "value": "TestAdd"}, {"name": "host", "value": "DESKTOP-M7394K0"}, {"name": "thread", "value": "168592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_list"}]}